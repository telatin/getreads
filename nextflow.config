manifest {
    name            = 'telatin/getreads'
    author          = 'Andrea Telatin'
    homePage        = 'https://github.com/telatin/getreads'
    description     = 'A Small SRA downloader Pipeline'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=21.04.0'
    version         = '2.2'
}

params {
    outdir = "getreads"
    tracedir = "${params.outdir}/pipeline_info"

    // Defaults only, expecting to be overwritten
    max_memory                 = '16.GB'
    max_cpus                   = 8
    max_time                   = '12.h'
}

process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 4    * task.attempt, 'cpus'   ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time   = { check_max( 8.h  * task.attempt, 'time'   ) }

    errorStrategy = { 
            task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' 
    }
    maxRetries    = 1
    maxErrors     = '-1'
    
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 5
    }
}


profiles {
    conda {
        conda.enabled          = true
        params.enable_conda    = true
        process.conda          = "$baseDir/deps/env.yaml"
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    docker {
        process.container      = 'andreatelatin/getreads:2.0'
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        process.container = 'docker://andreatelatin/getreads:2.0'
        singularity.enabled    = true
        singularity.autoMounts = true
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    test {
        params.list            = "$baseDir/test/list.txt"
        params.outdir          = "$baseDir/test/output"
        max_memory             = '4.GB'
        max_cpus               = 1
        max_time               = '24.h'
        process {
                cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
                memory = { check_max( 4.GB * task.attempt, 'memory' ) }
                time   = { check_max( 6.h  * task.attempt, 'time'   ) }
        }
    }
}


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
